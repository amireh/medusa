#!/usr/bin/env bash

type -p git >/dev/null || {
  echo "Error: git is required to proceed. Please install git and try again." 1>&2
  exit 1
}

TICK='âœ“'
MEDUSA_INSTALLER_STAMP="Automatically added by medusa-installer"
MEDUSA_SRC="${MEDUSA_SRC:-https://github.com/amireh/medusa}"
MEDUSA_REF="${MEDUSA_REF:-master}"

main() {
  BASH_PROFILE="${BASH_PROFILE:-"$(installer.locate_bash_profile)"}"
  MEDUSA_DIR="${MEDUSA_DIR:-"$(installer.locate_installation_dir)"}"
  MEDUSA_BIN="${MEDUSA_DIR}/bin/medusa"

  installer.header "medusa-installer"

  echo "Installation arguments:"
  echo ""
  echo "MEDUSA_DIR    = ${MEDUSA_DIR}"
  echo "MEDUSA_SRC    = ${MEDUSA_SRC}"
  echo "MEDUSA_REF    = ${MEDUSA_REF}"
  echo "BASH_PROFILE  = ${BASH_PROFILE}"

  installer.install_medusa &&
  installer.configure_bash || return $?

  echo ""
  echo "Done! Run \"medusa help\" to get started."
}

installer.install_medusa() {
  installer.header "INSTALL"

  (
    DIR="${MEDUSA_DIR}" \
    GIT_ORIGIN="${MEDUSA_SRC}" \
    GIT_BRANCH="${MEDUSA_REF}" \
      git_clone
  ) || return $?
}

installer.configure_bash() {
  installer.header "CONFIGURE"

  if [[ ! -f ${BASH_PROFILE} ]]; then
    echo "Unable to locate Bash profile, can not configure Bash automatically." 1>&2
    echo "Run the following command for instructions on configuring medusa for " 1>&2
    echo "your shell:" 1>&2
    echo "    ${MEDUSA_BIN} init" 1>&2

    return 1
  fi

  if grep -q "${MEDUSA_INSTALLER_STAMP}" "${BASH_PROFILE}"; then
    echo "Bash is already configured to load medusa, nothing to do."

    # medusa not in PATH?
    if ! command -v 1>/dev/null medusa; then
      echo ""
      echo "NOTE: It seems that your current PATH does not contain 'medusa' even " 1>&2
      echo "      though the directive exists in your profile. You may need to " 1>&2
      echo "      restart your shell session for the changes to take effect." 1>&2
    # different medusa in PATH?
    elif [[ $(command -v medusa) != ${MEDUSA_BIN} ]]; then
      echo ""
      echo "NOTE: It seems that your current PATH is pointing at a different" 1>&2
      echo "      version of 'medusa' than the one provided by this installation." 1>&2
      echo "      " 1>&2
      echo "      This one  = ${MEDUSA_BIN}" 1>&2
      echo "      PATH one  = $(command -v medusa)" 1>&2
      echo "      " 1>&2
      echo "      You may want to amend your shell profile to load the desired" 1>&2
      echo "      version." 1>&2
    fi

    return 0
  fi

  {
    echo "# ----------------------------------------------------------------------"
    echo "# ${MEDUSA_INSTALLER_STAMP} (on $(date -u))"
    echo "eval \"\$('${MEDUSA_BIN}' init -)\""
    echo "# ----------------------------------------------------------------------"
  } >> "${BASH_PROFILE}"

  echo "Bash configured. $TICK"
  echo ""
  echo "NOTE: You must reload your Bash profile to reflect the changes to PATH."
  echo "      Either restart your shell, or run the following command:"
  echo ""
  echo "          source ${BASH_PROFILE}"
  echo ""
}

installer.locate_bash_profile() {
  files=(
    "${HOME}/.bashrc"
    "${HOME}/.bash_profile"
  )

  for file in "${files[@]}"; do
    if test -f "${file}"; then
      echo "${file}"
      break
    fi
  done

  return 1
}

installer.locate_installation_dir() {
  if type -p medusa 1>/dev/null; then
    medusa info | grep MEDUSA_DIR | cut -d'=' -f2-
  else
    echo "${HOME}/.medusa"
  fi
}

installer.header() {
  echo ""
  echo "$@"
  echo "------------------------------------------------------------------------"
}

git_clone() {
  local installing=1

  if [[ ! -d ${DIR} ]]; then
    mkdir -p ${DIR} || return $?
  fi

  cd ${DIR}

  {
    if [[ ! -d .git ]]; then
      echo "Installing from git..."
      git init --quiet .
    else
      installing=0
      echo "Updating from git..."
    fi
  } || return $?

  {
    if git remote | grep -q "origin"; then
      git remote set-url origin "${GIT_ORIGIN}"
    else
      git remote add origin "${GIT_ORIGIN}"
    fi
  } || return $?

  {
    if git branch --list | grep -q $GIT_BRANCH; then
      git checkout --quiet $GIT_BRANCH
    else
      git checkout --quiet -b $GIT_BRANCH
    fi
  } || return $?

  {
    git pull --tags --quiet origin $GIT_BRANCH
  } || return $?

  if [[ $installing -eq 1 ]]; then
    echo "Installed. $TICK"
  else
    echo "Up to date. $TICK"
  fi
}

main "$@"
