#!/usr/bin/env bash

T_PRG="medusa-installer"

if [[ -t 1 ]]; then
  T_ERR="\033[0;31m"
  T_OKA='[âœ“]'
  T_PEN='[ ]'
  T_RES="\033[0m"
  T_WAR="\033[1;33m" # imagination hits a brickwall
fi

type -p git >/dev/null || {
  echo "$T_PRG: git is required to proceed. Please install it and try again." 1>&2
  exit 1
}

MEDUSA_INSTALLER_STAMP="Automatically added by medusa-installer"
MEDUSA_SRC="${MEDUSA_SRC:-https://github.com/amireh/medusa}"
MEDUSA_REF="${MEDUSA_REF:-master}"

main() {
  BASH_PROFILE="${BASH_PROFILE:-"$(installer.locate_bash_profile)"}"
  MEDUSA_DIR="${MEDUSA_DIR:-"$(installer.locate_installation_dir)"}"
  MEDUSA_BIN="${MEDUSA_DIR}/bin/medusa"

  echo "Medusa installation arguments:"
  echo ""
  echo "MEDUSA_DIR    = ${MEDUSA_DIR}"
  echo "MEDUSA_SRC    = ${MEDUSA_SRC}"
  echo "MEDUSA_REF    = ${MEDUSA_REF}"
  echo "BASH_PROFILE  = ${BASH_PROFILE}"
  echo ""

  installer.install_medusa &&
  installer.configure_bash || return $?

  echo ""
  echo "Done! Run \"medusa help\" to get started."
}

installer.install_medusa() {
  (
    DIR="${MEDUSA_DIR}" \
    GIT_ORIGIN="${MEDUSA_SRC}" \
    GIT_BRANCH="${MEDUSA_REF}" \
      git_clone
  ) || return $?
}

installer.configure_bash() {
  echo "$T_PEN Configuring Bash..."

  if [[ ! -f ${BASH_PROFILE} ]]; then
    echo -e "$T_WAR"
    echo "Unable to locate Bash profile in order to configure Bash for you."
    echo "Run the following command for instructions on configuring medusa for "
    echo "your shell:"
    echo ""
    echo "    ${MEDUSA_BIN} init"
    echo -e "$T_RES"

    return 1
  fi

  # be conservative about adding anything to the profile; don't if:
  #
  # - installer was run before (where the stamp would exist)
  # - 'eval "$(path/to/medusa init -)"' directive exists (the output of `medusa
  #   init` was added by hand)
  # - medusa is already in path (maybe a symlink is used)
  if ! grep  -q "${MEDUSA_INSTALLER_STAMP}" "${BASH_PROFILE}" &&
     ! egrep -q '^eval .+medusa.+init -'    "${BASH_PROFILE}" &&
     ! type  -p medusa
  then
    {
      echo "# ----------------------------------------------------------------------"
      echo "# ${MEDUSA_INSTALLER_STAMP} (on $(date -u))"
      echo "eval \"\$('${MEDUSA_BIN}' init -)\""
      echo "# ----------------------------------------------------------------------"
    } >> "${BASH_PROFILE}"

    echo ""
    echo "NOTE: You must reload your Bash profile to reflect the changes to PATH."
    echo "      Either restart your shell, or run the following command:"
    echo ""
    echo "          source ${BASH_PROFILE}"
    echo ""
  # medusa not in PATH?
  elif ! type -p medusa; then
    echo -e "${T_WAR}"
    echo "NOTE: It seems that your current PATH does not contain 'medusa' even "
    echo "      though the directive exists in your profile. You may need to "
    echo "      restart your shell session for the changes to take effect."
    echo -e "${T_RES}"
  # different medusa in PATH?
  elif [[ $(type -p medusa) != ${MEDUSA_BIN} ]]; then
    echo -e "${T_WAR}"
    echo "NOTE: It seems that your current PATH is pointing at a version of"
    echo "      medusa other than the one provided by this installation."
    echo "      "
    echo "      This one  = ${MEDUSA_BIN}"
    echo "      PATH one  = $(type -p medusa)"
    echo "      "
    echo "      You may want to amend your shell profile to load the desired"
    echo "      version."
    echo -e "$T_RES"
  fi

  echo "$T_OKA Bash configured."
}

installer.locate_bash_profile() {
  files=(
    "${HOME}/.bashrc"
    "${HOME}/.bash_profile"
  )

  for file in "${files[@]}"; do
    if test -f "${file}"; then
      echo "${file}"
      break
    fi
  done

  return 1
}

installer.locate_installation_dir() {
  if type -p medusa 1>/dev/null; then
    medusa info | grep MEDUSA_DIR | cut -d'=' -f2-
  else
    echo "${HOME}/.medusa"
  fi
}

git_clone() {
  local installing=1

  if [[ ! -d ${DIR} ]]; then
    mkdir -p ${DIR} || return $?
  fi

  cd ${DIR}

  {
    if [[ ! -d .git ]]; then
      echo "$T_PEN Installing from git..."
      git init --quiet .
    else
      installing=0
      echo "$T_PEN Updating from git..."
    fi
  } || return $?

  {
    if git remote | grep -q "origin"; then
      git remote set-url origin "${GIT_ORIGIN}"
    else
      git remote add origin "${GIT_ORIGIN}"
    fi
  } || return $?

  {
    if git branch --list | grep -q $GIT_BRANCH; then
      git checkout --quiet $GIT_BRANCH
    else
      git checkout --quiet -b $GIT_BRANCH
    fi
  } || return $?

  {
    git pull --tags --quiet origin $GIT_BRANCH
  } || return $?

  if [[ $installing -eq 1 ]]; then
    echo "$T_OKA Installed."
  else
    echo "$T_OKA Updated."
  fi
}

main "$@"
