#!/usr/bin/env bash

MEDUSA_ANSIBLE_IMAGE="amireh/ansible:2.5.3-4.1"
MEDUSA_VERSION="1.0"

#                          ,--.
#          ,--.  .--,`) )  .--,
#       .--,`) \( (` /,--./ (`
#      ( ( ,--.  ) )\ /`) ).--,-.
#       ;.__`) )/ /) ) ( (( (`_) )
#      ( (  / /( (.' "-.) )) )__.'-,
#     _,--.( ( /`         `,/ ,--,) )
#    ( (``) \,` ==.    .==  \( (`,-;
#     ;-,( (_) ~6~ \  / ~6~ (_) )_) )
#    ( (_ \_ (      )(      )__/___.'
#    '.__,-,\ \     ''     /\ ,-.
#       ( (_/ /\    __    /\ \_) )
#        '._.'  \  \__/  /  '._.'
#            .--`\      /`--.
#    jgs          '----'
main() {
  local defined_methods=( $(declare -F | cut -d' ' -f3) )
  local commands=()

  for method in "${defined_methods[@]}"; do
    if [[ ${method} =~ "medusa." ]]; then
      commands+=("${method/medusa./}")
    fi
  done

  if [[ " ${commands[@]} " =~ " $1 " ]]; then
    medusa."$@"
  elif [[ ${1} == "commands" ]]; then
    medusa_commands "${commands[@]}"
  else
    if [[ $# -gt 0 ]]; then
      tty_print_error "unknown command \"$1\""
    fi

    medusa.help 1>&2
    exit 1
  fi
}

# ------------------------------------------------------------------------------
# ARGUMENTS
# ------------------------------------------------------------------------------

export ANSIBLE_RETRY_FILES_ENABLED="${ANSIBLE_RETRY_FILES_ENABLED:-false}"
export ANSIBLE_STDERR_CALLBACK="${ANSIBLE_STDERR_CALLBACK:-debug}"
export ANSIBLE_STDOUT_CALLBACK="${ANSIBLE_STDOUT_CALLBACK:-debug}"
export ANSIBLE_VAULT_PASS="${ANSIBLE_VAULT_PASS}"
export MEDUSA_CONTAINER="${MEDUSA_CONTAINER}"
export MEDUSA_DOCKERHOST="${MEDUSA_DOCKERHOST}"
export MEDUSA_INFER_CONFIG="${MEDUSA_INFER_CONFIG:-1}"
export MEDUSA_SETTINGS_FILE="${MEDUSA_SETTINGS_FILE:-settings.yml}"
export MEDUSA_SHARE_DIR="${MEDUSA_SHARE_DIR:-/mnt/medusa}"
export MEDUSA_SSH_DIR="${MEDUSA_SSH_DIR:-${HOME}/.ssh}"
export MEDUSA_VERBOSE="${MEDUSA_VERBOSE:-0}"

# ------------------------------------------------------------------------------
# COMMANDS
# ------------------------------------------------------------------------------

medusa.ansible() {
  medusa_docker_run -- mimic ansible "$@"
}

medusa.ansible-galaxy() {
  medusa_docker_run -- mimic ansible-galaxy "$@"
}

medusa.ansible-playbook() {
  local dockerhost="$(resolve_dockerhost)"
  local flags=(--extra-vars "@${MEDUSA_SHARE_DIR}/vars/medusa.yml")

  if [[ -f ${MEDUSA_SETTINGS_FILE} ]]; then
    flags=("${flags[@]}" --extra-vars "@${MEDUSA_SETTINGS_FILE}")
  fi

  echo "$(docker --version)" 1>&2
  echo "Docker host address: ${dockerhost}" 1>&2
  echo "Docker host user UID/GID: $(id -u):$(id -g)" 1>&2
  echo "Ansible flags: ${flags[@]}" 1>&2
  echo "------------------------------------------------------------------------" 1>&2

  if [[ -z ${dockerhost} ]] && ! $(has_dockerhost_in_settings); then
    {
      echo "[WARN] Unable to resolve the docker host ip address automatically..."
      echo "       Please specify \"dockerhost\" in \"${MEDUSA_SETTINGS_FILE}\" "
      echo "       if you're planning to use the variable. For example:"
      echo ""
      echo "           dockerhost: 192.168.1.100"
      echo ""
    } 1>&2
  fi

  # locate an ansible.cfg in the directories of any of the specified playbooks
  if ! has_ansible_config && [[ ${MEDUSA_INFER_CONFIG} == "1" ]]; then
    local file_args=( $(scan_positional_arguments "$@") )

    for cfile in "${file_args[@]}"; do
      local cdir="$(dirname "${cfile}")"

      if [[ -f ${cdir}/ansible.cfg ]]; then
        export ANSIBLE_CONFIG="${cdir}/ansible.cfg"
        break
      fi
    done
  fi

  medusa_docker_run \
    -v "$(resolve_path ../share)":"${MEDUSA_SHARE_DIR}":'ro' \
    -e MEDUSA_DOCKERHOST="${dockerhost}" \
    -- \
      mimic \
        ansible-playbook "${flags[@]}" "$@"
}

medusa.ansible-vault() {
  medusa_docker_run -- mimic ansible-vault "$@"
}

medusa.exec() {
  medusa_docker_run -- "$@"
}

medusa.go() {
  medusa.ansible-playbook "$@"
}

medusa.help() {
  local commands=(
    "ansible"           "access to dockerized ansible"
    "ansible-galaxy"    "access to dockerized ansible-galaxy"
    "ansible-playbook"  "access to dockerized ansible-playbook"
    "ansible-vault"     "access to dockerized ansible-vault"
    "exec"              "execute an arbitrary command in the container"
    "help"              "display this help listing"
    "info"              "display medusa installation information"
  )

  local env_vars=(
    "ANSIBLE_*"
    "any of the supported Ansible environment variables ${TTY_YELLOW}[all]${TTY_RESET}"

    " " " "
    "ANSIBLE_RETRY_FILES_ENABLED"
    "default override to 'false' ${TTY_YELLOW}[ansible-playbook]${TTY_RESET}"

    " " " "
    "ANSIBLE_STDERR_CALLBACK"
    "default override to 'debug' ${TTY_YELLOW}[ansible-playbook]${TTY_RESET}"

    " " " "
    "ANSIBLE_STDOUT_CALLBACK"
    "default override to 'debug' ${TTY_YELLOW}[ansible-playbook]${TTY_RESET}"

    " " " "
    "ANSIBLE_VAULT_PASS"
    "ansible vault password to stash into a file readable only to the ansible user\n \n>> DO NOT TYPE THIS IN CLEAR-TEXT <<\n \n${TTY_YELLOW}[ansible, ansible-playbook, ansible-vault]${TTY_RESET}"

    " " " "
    "MEDUSA_CONTAINER"
    "a name to assign to the docker container ${TTY_YELLOW}[all]${TTY_RESET}"

    " " " "
    "MEDUSA_DOCKERHOST"
    "ip address to use inside containers to reach the docker host (default: infer from host) ${TTY_YELLOW}[ansible-playbook]${TTY_RESET}"

    " " " "
    "MEDUSA_INFER_CONFIG"
    "locate an ansible.cfg file to use when none exists in the default search paths (default: yes) ${TTY_YELLOW}[ansible-playbook]${TTY_RESET}"

    " " " "
    "MEDUSA_SETTINGS_FILE"
    "user variable overrides (default: 'settings.yml' if it exists) ${TTY_YELLOW}[ansible-playbook]${TTY_RESET}"

    " " " "
    "MEDUSA_SHARE_DIR"
    "path to where the medusa library should be mounted inside the container (default: ${MEDUSA_SHARE_DIR}) ${TTY_YELLOW}[ansible-playbook]${TTY_RESET}"

    " " " "
    "MEDUSA_SSH_DIR"
    "ssh directory to mount for use by the masquerading user (default: '\$HOME/.ssh' if it exists) ${TTY_YELLOW}[all]${TTY_RESET}"

    " " " "
    "MEDUSA_VERBOSE"
    "print docker commands to console before running (default: 0) ${TTY_YELLOW}[all]${TTY_RESET}"
  )

  local medusa_version="${MEDUSA_VERSION}"
  local ansible_version="${MEDUSA_ANSIBLE_IMAGE}"
  local docker_version="$(docker version -f '{{ .Server.Version }}')"

  printf "medusa                               [medusa  : %s]\n" "${medusa_version}"
  printf "                                     [ansible : %s]\n" "${ansible_version}"
  printf "                                     [docker  : %s]\n" "${docker_version}"

  cat <<-'EOF'
                             ,--.
              ,--.  .--,`) )  .--,
           .--,`) \( (` /,--./ (`
          ( ( ,--.  ) )\ /`) ).--,-.
           ;.__`) )/ /) ) ( (( (`_) )
          ( (  / /( (.' "-.) )) )__.'-,
         _,--.( ( /`         `,/ ,--,) )
        ( (``) \,` ==.    .==  \( (`,-;
         ;-,( (_) ~6~ \  / ~6~ (_) )_) )
        ( (_ \_ (      )(      )__/___.'
        '.__,-,\ \     ''     /\ ,-.
           ( (_/ /\    __    /\ \_) )
            '._.'  \  \__/  /  '._.'
                .--`\      /`--.
        jgs          '----'
EOF

  printf "\nCommands:\n\n"

  tty_print_columnized_list 24 "${commands[@]}"

  printf "\nEnvironment variables:\n\n"

  tty_print_columnized_list 30 "${env_vars[@]}"

  printf "\n"
  printf "To fully configure Ansible, it is recommended to use an ansible.cfg \n"
  printf "file and point to it with ANSIBLE_CONFIG if necessary.\n"
  printf "\n"
  printf "Refer to Ansible documentation for the complete reference or run\n"
  printf "the following command:\n\n"
  printf "    medusa exec ansible-config list"
  printf "\n"
  printf "\n"
  printf "For full documentation, see: https://github.com/amireh/medusa"
  printf "\n"
}

medusa.info() {
  echo "MEDUSA_ANSIBLE_IMAGE=${MEDUSA_ANSIBLE_IMAGE}"
  echo "MEDUSA_BIN=$(resolve_path ../bin/medusa)"
  echo "MEDUSA_DIR=$(resolve_path ../)"
  echo "MEDUSA_DOCKER_VERSION=$(docker version -f '{{ .Server.Version }}')"
  echo "MEDUSA_VERSION=${MEDUSA_VERSION}"
}

medusa.init() {
  local installation_dir="$(resolve_path ../)"

  if [[ $1 == "-" ]]; then
    echo "export PATH=\"${installation_dir}/bin:\${PATH}\""
    echo ""
    echo "if [ -f '${installation_dir}/completions/medusa.bash' ]; then"
    echo "  source '${installation_dir}/completions/medusa.bash'"
    echo "fi"
  else
    echo '# Load medusa by appending the following to ~/.bash_profile or ~/.bashrc:' 1>&2
    echo "eval \"\$('${installation_dir}/bin/medusa' init -)\"" 1>&2

    exit 1
  fi
}

# ------------------------------------------------------------------------------
# PRIVATE
# ------------------------------------------------------------------------------

medusa_commands() {
  echo "$@"
}

medusa_docker_run() {
  local command_args=()
  local ansible_env_vars=()
  local args=(
    --rm
    -t
    -v '/var/run/docker.sock':'/var/run/docker.sock':'ro'
    -v "${PWD}":'/mnt/src':'rw'
    -w '/mnt/src'
    -e MIMIC_GID="$(id -G)"
    -e MIMIC_UID="$(id -u)"
    -e MEDUSA_PWD="${PWD}"
  )

  if [[ -t 0 ]]; then
    args=("${args[@]}" -i)
  fi

  if [[ -d ${MEDUSA_SSH_DIR} ]]; then
    args=("${args[@]}" -v "${MEDUSA_SSH_DIR}":'/home/donkey/.ssh':'ro')
  fi

  if [[ -n ${MEDUSA_CONTAINER} ]]; then
    args=("${args[@]}" --name "${MEDUSA_CONTAINER}")
  fi

  IFS=$'\n' read -rd '' -a ansible_env_vars <<< "$(env | grep ANSIBLE_ | sort)"

  for env_var in "${ansible_env_vars[@]}"; do
    args=("${args[@]}" -e "${env_var}")
  done

  local delimiter_found=1

  for arg in "$@"; do
    if [[ $arg == "--" ]]; then
      delimiter_found=0
    elif [[ $delimiter_found -eq 0 ]]; then
      command_args=("${command_args[@]}" "${arg}")
    else
      args=("${args[@]}" "${arg}")
    fi
  done

  if [[ "$MEDUSA_VERBOSE" == "1" ]]; then
    echo "docker run ${args[@]} $MEDUSA_ANSIBLE_IMAGE ${command_args[@]}" 1>&2
  fi

  docker run "${args[@]}" $MEDUSA_ANSIBLE_IMAGE "${command_args[@]}"
}

# ------------------------------------------------------------------------------
# UTILS
# ------------------------------------------------------------------------------

if [[ -t 1 ]]; then
  TTY_BOLD="\033[1m"
  TTY_GREEN="\033[0;32m"
  TTY_RED="\033[0;31m"
  TTY_RESET="\033[0m"
  TTY_YELLOW="\033[1;33m"
fi

# (shortdesc: String, longdesc: String, keycol_sz: Number = 24): void
tty_columnize() {
  local key="${1}"
  local value="${2}"
  local keycol_sz="${3:-24}"
  local valcol_sz=$(( ${4:-72} - $keycol_sz ))
  local IFS=$'\n'
  local lines=( $(printf "${value}" | fold -s -w $valcol_sz) )
  local printf_key="%-${keycol_sz}s"

  for i in "${!lines[@]}"; do
    if [ $i -gt 0 ]; then
      printf "${printf_key} %s\n" "" "${lines[i]}"
    else
      printf "${TTY_BOLD}${printf_key}${TTY_RESET} %s\n" "${key}" "${lines[i]}"
    fi
  done
}

# (Array<Tuple<shortdesc: String, longdesc: String>>): void
tty_print_columnized_list() {
  local i=""
  local keycol_sz=$1
  shift 1
  local list=("$@")
  local indent="  "

  for i in `seq 0 2 ${#@}`; do
    tty_columnize "${indent}${list[i]}" "${list[i+1]}" $keycol_sz
  done
}

# (): String
tty_progname() {
  echo $(basename $0)
}

# (String): String
tty_print_error() {
  printf "${TTY_RED}%s: %s${TTY_RESET}\n" $(tty_progname) "${1}" 1>&2
}

resolve_dockerhost() {
  if [[ -n ${MEDUSA_DOCKERHOST} ]]; then
    echo "${MEDUSA_DOCKERHOST}"
  # see https://github.com/moby/moby/issues/22753#issuecomment-219340358
  # see https://docs.docker.com/docker-for-mac/networking/#use-cases-and-workarounds
  elif uname | grep Darwin 1> /dev/null; then
    echo 'host.docker.internal'
  else
    local host=$(docker network inspect bridge -f '{{ (index .IPAM.Config 0).Gateway }}')

    if [[ -n ${host} ]]; then
      echo "${host}"
    elif command -v ip 1>/dev/null; then
      {
        ip route list dev docker0 | awk 'NR==1 {print $NF}'
      } 2>/dev/null # don't care if it fails
    fi
  fi
}

has_dockerhost_in_settings() {
  if [[ ! -f ${MEDUSA_SETTINGS_FILE} ]]; then
    return 1
  fi

  # no need to go crazy with telling whether the property has a valid host (A or
  # CNAME), just verify that the property at least exists and is not commented
  # out (hence the "^")
  #
  #     [✓] dockerhost: 192.168.1.100
  #     [✓] dockerhost: host.docker.internal
  #     [✕] dockerhost:
  #     [✕] # dockerhost:
  #     [✕] # dockerhost: ...
  egrep -q '^dockerhost:\s*.+$' "${MEDUSA_SETTINGS_FILE}"
}

resolve_path() {
  # yield on absolute paths
  if [[ "${1}" =~ ^/ ]]; then
    echo "${1}"
    return 0
  fi

  local this_file="$(resolve_symlink "${BASH_SOURCE[0]}")"
  local this_dir="$( cd "$( dirname "${this_file}" )" && pwd )"

  if [[ -z ${this_dir} ]]; then
    return 1
  fi

  local path="${this_dir}/${1}"

  # remove all /./ sequences.
  path="${path//\/\.\///}"

  # remove dir/.. sequences.
  while [[ "${path}" =~ ([^/][^/]*/\.\./) ]]; do
    path="${path/${BASH_REMATCH[0]}/}"
  done

  # remove trailing slash for directories
  path="${path%/}"

  echo $path
}

resolve_symlink() {
  if test -L "${1}"; then
    $(type -p greadlink readlink | head -1) "${1}"
  else
    echo "${1}"
  fi
}

scan_positional_arguments() {
  local state=0
  local pargs=()

  for arg in "${@}"; do
    if [[ $arg =~ ^- ]]; then
      state=1
    elif [[ $state -eq 1 ]]; then
      state=0
      continue
    else
      pargs=("${pargs[@]}" "${arg}")
    fi
  done

  echo "${pargs[@]}"
}

# resolving rules here: https://docs.ansible.com/ansible/latest/reference_appendices/config.html#the-configuration-file
has_ansible_config() {
  test -n "${ANSIBLE_CONFIG}" ||
  test -f ./ansible.cfg ||
  test -f ~/ansible.cfg ||
  test -f /etc/ansible/ansible.cfg
}

main "$@"
